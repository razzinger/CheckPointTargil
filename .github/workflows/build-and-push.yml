name: Build and Deploy Docker Images

on:
  push:
    branches:
      - master
    paths:
      - 'source/**'
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build frontend image
        run: |
          docker build -f docker_files/frontend/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest .

      - name: Build backend image
        run: |
          docker build -f docker_files/backend/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .

      - name: Push frontend image to Docker Hub
        run: |
          docker push ${{ vars.DOCKER_USERNAME }}/frontend:latest

      - name: Push backend image to Docker Hub
        run: |
          docker push ${{ vars.DOCKER_USERNAME }}/backend:latest

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
        shell: bash

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Register ECS Task Definition for Frontend
        run: |
          FRONTEND_TASK_DEF=$(aws ecs register-task-definition \
            --family frontend \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --container-definitions "$(cat <<EOF
          [
            {
              "name": "frontend-container",
              "image": "${{ secrets.DOCKER_USERNAME }}/frontend:latest",
              "memory": 512,
              "cpu": 256,
              "essential": true
            }
          ]
          EOF
          )" | jq -r '.taskDefinition.taskDefinitionArn')
          echo "Frontend task definition ARN: $FRONTEND_TASK_DEF"
          echo "FRONTEND_TASK_DEF=$FRONTEND_TASK_DEF" >> $GITHUB_ENV
        shell: bash

      - name: Register ECS Task Definition for Backend
        run: |
          BACKEND_TASK_DEF=$(aws ecs register-task-definition \
            --family ${{ vars.ECS_TASK_DEFINITION_BACKEND_FAMILY }} \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --container-definitions "$(cat <<EOF
          [
            {
              "name": "backend",
              "image": "${{ secrets.DOCKER_USERNAME }}/backend:latest",
              "memory": 512,
              "cpu": 256,
              "essential": true
            }
          ]
          EOF
          )" | jq -r '.taskDefinition.taskDefinitionArn')
          echo "Backend task definition ARN: $BACKEND_TASK_DEF"
          echo "BACKEND_TASK_DEF=$BACKEND_TASK_DEF" >> $GITHUB_ENV
        shell: bash                                                                                                                                                        

      - name: Update ECS Frontend Service
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER_NAME }} \
            --service ${{ vars.ECS_SERVICE_FRONTEND_NAME }} \
            --task-definition ${{ vars.ECS_TASK_DEFINITION_FRONTEND_FAMILY }} \
            --force-new-deployment
        shell: bash

      - name: Update ECS Backend Service
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER_NAME }} \
            --service ${{ vars.ECS_SERVICE_BACKEND_NAME }} \
            --task-definition ${{ vars.BACKEND_TASK_DEF }} \
            --force-new-deployment
        shell: bash
